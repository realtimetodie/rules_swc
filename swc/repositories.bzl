"""Declare runtime dependencies

These are needed for local dev, and users must install them as well.
See https://docs.bazel.build/versions/main/skylark/deploying.html#dependencies
"""

load("@aspect_rules_js//npm:npm_import.bzl", "npm_import", "npm_translate_lock")
load("//swc/private:toolchains_repo.bzl", "PLATFORMS", "toolchains_repo")
load("//swc/private:versions.bzl", "TOOL_VERSIONS")
load("//swc:cli_repositories.bzl", _cli_repositories = "npm_repositories")

LATEST_VERSION = TOOL_VERSIONS.keys()[0]

_DOC = "Fetch external tools needed for swc toolchain"
_ATTRS = {
    "swc_version": attr.string(mandatory = True),
    "platform": attr.string(mandatory = True, values = PLATFORMS.keys()),
    "integrity_hashes": attr.string_dict(),
}

def _swc_repo_impl(repository_ctx):
    url = "https://registry.npmjs.org/@swc/core-{0}/-/core-{0}-{1}.tgz".format(
        repository_ctx.attr.platform,
        repository_ctx.attr.swc_version.lstrip("v"),
    )
    integrity = repository_ctx.attr.integrity_hashes.get(
        repository_ctx.attr.platform,
        None,
    )
    if not integrity:
        integrity = TOOL_VERSIONS[repository_ctx.attr.swc_version][repository_ctx.attr.platform]
    bin = "package/swc{ext}".format(ext = ".exe" if False else "")  # FIXME: check for windows

    repository_ctx.download_and_extract(
        #output = filename,
        url = url,
        integrity = integrity,
    )
    result = repository_ctx.execute(["chmod", "u+x", "package/swc"])
    if result.return_code:
        msg = "chmod failed: \nSTDOUT:\n%s\nSTDERR:\n%s" % (result.stdout, result.stderr)
        fail(msg)
    build_content = """#Generated by swc/repositories.bzl
load("@aspect_rules_swc//swc:toolchain.bzl", "swc_toolchain")
swc_toolchain(name = "swc_toolchain", swc_binary = "{bin}")
""".format(bin = bin)

    # Base BUILD file for this repository
    repository_ctx.file("BUILD.bazel", build_content)

swc_repositories = repository_rule(
    _swc_repo_impl,
    doc = _DOC,
    attrs = _ATTRS,
)

# Wrapper macro around everything above, this is the primary API
def swc_register_toolchains(name, register = True, **kwargs):
    """Convenience macro for users which does typical setup.

    - create a repository for each built-in platform like "swc_linux_amd64" -
      this repository is lazily fetched when node is needed for that platform.
    - TODO: create a convenience repository for the host platform like "swc_host"
    - create a repository exposing toolchains for each platform like "swc_platforms"
    - register a toolchain pointing at each platform
    Users can avoid this macro and do these steps themselves, if they want more control.
    Args:
        name: base name for all created repos, like "swc"
        register: whether to call through to native.register_toolchains.
            Should be True for WORKSPACE users, but false when used under bzlmod extension
        **kwargs: passed to each node_repositories call
    """

    # FIXME: validate the swc_version is either in TOOL_VERSIONS.keys()
    # or you gave us integrity_hashes and it includes the current platform
    for platform in PLATFORMS.keys():
        swc_repositories(
            name = name + "_" + platform,
            platform = platform,
            **kwargs
        )
        if register:
            native.register_toolchains("@%s_toolchains//:%s_toolchain" % (name, platform))

    toolchains_repo(
        name = name + "_toolchains",
        user_repository_name = name,
    )

    # FIXME
    npm_import(
        name = "npm__at_swc_core__1.2.185",
        integrity = "sha512-dDNzDrJ4bzMVWeFWqLJojjv5XZJZ84Zia7kQdJjp+kfOMdEhS+onrAwrk5Q88PlAvbrhY6kQbWD2LZ8JdyEaSQ==",
        root_package = "swc",
        link_workspace = "aspect_rules_swc",
        link_packages = {},
        package = "@swc/core",
        version = "1.2.185",
        transitive_closure = {
            "@swc/core": ["1.2.185"],
        },
    )

    npm_translate_lock(
        name = "swc_cli",
        pnpm_lock = "@aspect_rules_swc//swc:pnpm-lock.yaml",
        link_workspace = "aspect_rules_swc",
    )

    # We ALSO re-declare the results of the previous npm_translate_lock
    # so that users don't have to make an extra load/execution in their WORKSPACE
    _cli_repositories()
